{"ast":null,"code":"const fetch = require(\"node-fetch\");\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5001\";\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    if (response.status === 204) {\n      return null;\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listProjects(signal) {\n  const url = `${API_BASE_URL}/projects`;\n  return await fetchJson(url, {\n    signal\n  }, []);\n}","map":{"version":3,"names":["fetch","require","API_BASE_URL","process","env","fetchJson","url","options","onCancel","response","status","Error","statusText","json","error","name","console","stack","Promise","resolve","listProjects","signal"],"sources":["/Users/ph/Documents/portfolio/portfolio-new/frontend/src/utils/api/api.js"],"sourcesContent":["const fetch = require(\"node-fetch\");\n\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5001\"\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listProjects(signal) {\n  const url = `${API_BASE_URL}/projects`;\n  return await fetchJson(url, { signal }, []);\n}"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACF,YAAY,IAAI,uBAAuB;AAExE,eAAeG,SAASA,CAACC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACM,GAAG,EAAEC,OAAO,CAAC;IAE1C,IAAIE,QAAQ,CAACC,MAAM,GAAG,GAAG,IAAID,QAAQ,CAACC,MAAM,GAAG,GAAG,EAAE;MAClD,MAAM,IAAIC,KAAK,CAAE,GAAEF,QAAQ,CAACC,MAAO,MAAKD,QAAQ,CAACG,UAAW,EAAC,CAAC;IAChE;IAEA,IAAIH,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAO,IAAI;IACb;IAEA,OAAO,MAAMD,QAAQ,CAACI,IAAI,CAAC,CAAC;EAE9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;MAC/BC,OAAO,CAACF,KAAK,CAACA,KAAK,CAACG,KAAK,CAAC;MAC1B,MAAMH,KAAK;IACb;IACA,OAAOI,OAAO,CAACC,OAAO,CAACX,QAAQ,CAAC;EAClC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeY,YAAYA,CAACC,MAAM,EAAE;EACzC,MAAMf,GAAG,GAAI,GAAEJ,YAAa,WAAU;EACtC,OAAO,MAAMG,SAAS,CAACC,GAAG,EAAE;IAAEe;EAAO,CAAC,EAAE,EAAE,CAAC;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}